S -> ENTER S
S -> S ENTER
S -> S TITIKKOMA ENTER
S -> ENTER
S -> TITIKKOMA ENTER
S -> SS
SS -> PART SS
PART -> FUNC_STATEMENT
PART -> WHILE_LOOP
PART -> IF_STATEMENT
PART -> SENTENCE
EXP -> ID OP_ROUND_BRACKET CL_ROUND_BRACKET
EXP -> ID OP_ROUND_BRACKET PARAM CL_ROUND_BRACKET
EXP -> BOOLEAN
EXP -> ID_INT
EXP -> EXP ARITH_OP EXP
EXP -> TYPE OP_ROUND_BRACKET EXP CL_ROUND_BRACKET
SENTENCE -> WHILE_LOOP
SENTENCE -> FOR_LOOP
SENTENCE -> FUNC_STATEMENT
SENTENCE -> IF_BLOCK
SENTENCE -> FUNC_SENTENCE
SENTENCE -> FUNCTION_CALL
SENTENCE -> ASSIGN
SENTENCE -> ENTER SENTENCE
SENTENCE -> TITIKKOMA ENTER SENTENCE
SENTENCE -> SENTENCE ENTER SENTENCE
SENTENCE -> SENTENCE ENTER
SENTENCE -> SENTENCE TITIKKOMA ENTER
SENTENCE -> CONTINUE
SENTENCE -> BREAK
SENTENCE -> VAR_DEC
ASSIGN -> ID ASSIGN_OP ASSIGNMENT
ASSIGN -> ARRAY ASSIGN_OP ASSIGNMENT
ASSIGN -> ARRAY OBJECT ASSIGN_OP ASSIGNMENT
FUNCTION_CALL -> ID OP_ROUND_BRACKET CL_ROUND_BRACKET
FUNCTION_CALL -> ID OP_ROUND_BRACKET PARAM CL_ROUND_BRACKET
TERNARY_STATEMENT -> EXP TERNARY SENTENCE TITIKDUA SENTENCE
TERNARY_STATEMENT -> STATEMENT TERNARY SENTENCE TITIKDUA SENTENCE
TERNARY_STATEMENT -> ID TERNARY SENTENCE TITIKDUA SENTENCE
TERNARY_STATEMENT -> FUNCTION_CALL TERNARY SENTENCE TITIKDUA SENTENCE
TERNARY_STATEMENT -> LOGIC_OPR TERNARY SENTENCE TITIKDUA SENTENCE
STATEMENT -> EXP LOGIC_OP EXP
IF_STATEMENT -> IF OP_ROUND_BRACKET EXP CL_ROUND_BRACKET OP_CURLY_BRACKET ENTER SENTENCE CL_CURLY_BRACKET
IF_STATEMENT -> IF OP_ROUND_BRACKET STATEMENT CL_ROUND_BRACKET OP_CURLY_BRACKET ENTER SENTENCE CL_CURLY_BRACKET
IF_STATEMENT -> IF OP_ROUND_BRACKET ID CL_ROUND_BRACKET OP_CURLY_BRACKET ENTER SENTENCE CL_CURLY_BRACKET
IF_STATEMENT -> IF OP_ROUND_BRACKET FUNCTION_CALL CL_ROUND_BRACKET OP_CURLY_BRACKET ENTER SENTENCE CL_CURLY_BRACKET
IF_STATEMENT -> IF OP_ROUND_BRACKET ASSIGN CL_ROUND_BRACKET OP_CURLY_BRACKET ENTER SENTENCE CL_CURLY_BRACKET
IF_STATEMENT -> IF OP_ROUND_BRACKET LOGIC_OPR CL_ROUND_BRACKET OP_CURLY_BRACKET ENTER SENTENCE CL_CURLY_BRACKET
ELSEIF_STATEMENT -> ELSE IF OP_ROUND_BRACKET EXP CL_ROUND_BRACKET OP_CURLY_BRACKET ENTER SENTENCE CL_CURLY_BRACKET
ELSEIF_STATEMENT -> ELSE IF OP_ROUND_BRACKET STATEMENT CL_ROUND_BRACKET OP_CURLY_BRACKET ENTER SENTENCE CL_CURLY_BRACKET
ELSEIF_STATEMENT -> ELSE IF OP_ROUND_BRACKET ID CL_ROUND_BRACKET OP_CURLY_BRACKET ENTER SENTENCE CL_CURLY_BRACKET
ELSEIF_STATEMENT -> ELSE IF OP_ROUND_BRACKET FUNCTION_CALL CL_ROUND_BRACKET OP_CURLY_BRACKET ENTER SENTENCE CL_CURLY_BRACKET
ELSEIF_STATEMENT -> ELSE IF OP_ROUND_BRACKET LOGIC_OPR CL_ROUND_BRACKET OP_CURLY_BRACKET ENTER SENTENCE CL_CURLY_BRACKET
ELSEIF_MULTIPLE -> ELSEIF_STATEMENT
ELSEIF_MULTIPLE -> ELSEIF_STATEMENT ELSEIF_MULTIPLE
ELSE_STATEMENT -> ELSE OP_CURLY_BRACKET ENTER SENTENCE CL_CURLY_BRACKET
IF_BLOCK -> IF_STATEMENT
IF_BLOCK -> IF_STATEMENT ELSE_STATEMENT
IF_BLOCK -> IF_STATEMENT ELSEIF_MULTIPLE
IF_BLOCK -> IF_STATEMENT ELSEIF_MULTIPLE ELSE_STATEMENT
SWITCH_STATEMENT -> SWITCH OP_ROUND_BRACKET ID CL_ROUND_BRACKET OP_CURLY_BRACKET SWITCH_SENTENCE CL_CURLY_BRACKET
SWITCH_SENTENCE -> CASE ID TITIKDUA ENTER SENTENCE
SWITCH_SENTENCE -> CASE ID TITIKDUA ENTER SENTENCE ENTER BREAK
FOR_LOOP -> FOR OP_ROUND_BRACKET EXP TITIKKOMA EXP TITIKKOMA EXP CL_ROUND_BRACKET OP_CURLY_BRACKET ENTER LOOP_SENTENCE CL_CURLY_BRACKET
FOR_LOOP -> FOR OP_ROUND_BRACKET ID IN ID CL_ROUND_BRACKET OP_CURLY_BRACKET ENTER LOOP_SENTENCE CL_CURLY_BRACKET
WHILE_LOOP -> WHILE OP_ROUND_BRACKET LOGIC_OPR CL_ROUND_BRACKET OP_CURLY_BRACKET ENTER LOOP_SENTENCE CL_CURLY_BRACKET
WHILE_LOOP -> WHILE OP_ROUND_BRACKET ID_INT CL_ROUND_BRACKET OP_CURLY_BRACKET ENTER LOOP_SENTENCE CL_CURLY_BRACKET
LOOP_SENTENCE -> SENTENCE
LOOP_SENTENCE -> BREAK
LOOP_SENTENCE -> CONTINUE
LOOP_SENTENCE -> LOOP_SENTENCE ENTER LOOP_SENTENCE
LOOP_SENTENCE -> IF_BLOCK LOOP_SENTENCE
FUNC_STATEMENT -> FUNCTION ID OP_ROUND_BRACKET CL_ROUND_BRACKET OP_CURLY_BRACKET ENTER FUNC_SENTENCE CL_CURLY_BRACKET
FUNC_STATEMENT -> FUNCTION ID OP_ROUND_BRACKET FUNCPARAM CL_ROUND_BRACKET OP_CURLY_BRACKET ENTER FUNC_SENTENCE CL_CURLY_BRACKET
FUNC_SENTENCE -> RETURN ALL
FUNC_SENTENCE -> RETURN STATIC
FUNC_SENTENCE -> RETURN EXP
FUNC_SENTENCE -> RETURN ARITH_OPR
FUNC_SENTENCE -> RETURN OP_ROUND_BRACKET ARITH_OPR CL_ROUND_BRACKET
FUNC_SENTENCE -> RETURN LOGIC_OPR
FUNC_SENTENCE -> RETURN BOOLEAN
FUNC_SENTENCE -> IF_BLOCK
FUNC_SENTENCE -> PASS
FUNC_SENTENCE -> SENTENCE
FUNC_SENTENCE -> FUNC_SENTENCE RETURN ALL
FUNC_SENTENCE -> FUNC_SENTENCE RETURN STATIC
FUNC_SENTENCE -> FUNC_SENTENCE RETURN EXP
FUNC_SENTENCE -> FUNC_SENTENCE RETURN LOGIC_OPR
FUNC_SENTENCE -> SENTENCE FUNC_SENTENCE
FUNCPARAM -> PARAM
ENTER -> NEWLINE
ENTER -> NEWLINE ENTER
LOGIC_ID -> FUNCTION_CALL
LOGIC_ID -> ID_INT
LOGIC_ID -> NOT ID_INT
LOGIC_ID -> BOOLEAN
LOGIC_ID -> NOT LOGIC_ID
LOGIC_ID -> OP_ROUND_BRACKET LOGIC_ID CL_ROUND_BRACKET
LOGIC_OPR -> ID
LOGIC_OPR -> NOT LOGIC_OPR
LOGIC_OPR -> LOGIC_ID LOGIC_OP LOGIC_OPR
LOGIC_OPR -> LOGIC_ID LOGIC_OP LOGIC_ID
LOGIC_OPR -> OP_ROUND_BRACKET LOGIC_OPR CL_ROUND_BRACKET
LOGIC_OP -> AND
LOGIC_OP -> OR
LOGIC_OP -> NOT
LOGIC_OP -> LESS
LOGIC_OP -> LEQ
LOGIC_OP -> GREATER
LOGIC_OP -> GEQ
LOGIC_OP -> ISEQ
LOGIC_OP -> ISEQTYPE
LOGIC_OP -> ISNEQ
LOGIC_OP -> ISNEQTYPE
LOGIC_OP -> TERNARY
ARITH_OPR -> ID ARITH_OP ARITH_OPR
ARITH_OPR -> STATIC ARITH_OP ARITH_OPR
ARITH_OPR -> ID ARITH_OP ID
ARITH_OPR -> STATIC ARITH_OP ID
ARITH_OPR -> ID ARITH_OP STATIC
ARITH_OPR -> STATIC ARITH_OP STATIC
ARITH_OPR -> OP_ROUND_BRACKET ARITH_OPR CL_ROUND_BRACKET
ARITH_OPR -> TYPE OP_ROUND_BRACKET ARITH_OPR CL_ROUND_BRACKET
ARITH_OP -> TAMBAH
ARITH_OP -> KURANG
ARITH_OP -> KALI
ARITH_OP -> BAGI
ARITH_OP -> MOD
ARITH_OP -> PANGKAT
OPERATION -> ARITH_OPR
OPERATION -> LOGIC_OPR
ASSIGN_OP -> EQ
ASSIGN_OP -> TAMBAHSD
ASSIGN_OP -> KURANGSD
ASSIGN_OP -> KALISD
ASSIGN_OP -> BAGISD
ASSIGN_OP -> MODSD
ASSIGN_OP -> PANGKATSD
ASSIGN_OP -> INCREMENT
ASSIGN_OP -> DECREMENT
ASSIGNMENT -> ID
ASSIGNMENT -> INT
ASSIGNMENT -> STRING
ASSIGNMENT -> FUNCTION_CALL
ASSIGNMENT -> ARRAY
ASSIGNMENT -> OBJECT
ASSIGNMENT -> OPERATION
ASSIGNMENT -> BOOLEAN
VAR_DEC -> VAR ID
VAR_DEC -> VAR ID EQ ID
VAR_DEC -> VAR ID EQ INT
VAR_DEC -> VAR ID EQ STRING
VAR_DEC -> VAR ID EQ FLOAT
VAR_DEC -> VAR ID EQ BOOLEAN
VAR_DEC -> LET ID
VAR_DEC -> LET ID EQ ID
VAR_DEC -> LET ID EQ INT
VAR_DEC -> LET ID EQ STRING
VAR_DEC -> LET ID EQ FLOAT
VAR_DEC -> LET ID EQ BOOLEAN
VAR_DEC -> CONST ID
VAR_DEC -> CONST ID EQ ID
VAR_DEC -> CONST ID EQ INT
VAR_DEC -> CONST ID EQ STRING
VAR_DEC -> CONST ID EQ FLOAT
VAR_DEC -> CONST ID EQ BOOLEAN
STATIC -> INT
STATIC -> STRING
STATIC -> ARRAY
STATIC -> OBJECT
STATIC -> BOOLEAN
ARRAY -> OP_SQUARE_BRACKET CL_SQUARE_BRACKET
ARRAY -> OP_SQUARE_BRACKET PARAM CL_SQUARE_BRACKET
OBJECT -> OP_CURLY_BRACKET CL_CURLY_BRACKET
OBJECT -> OP_CURLY_BRACKET OBJECTPARAM CL_CURLY_BRACKET
OBJECTPARAM -> STATIC TITIKDUA STATIC
OBJECTPARAM -> OBJECTPARAM KOMA OBJECTPARAM
PARAM -> ALL
PARAM -> STATIC
PARAM -> PARAM KOMA PARAM
PARAM -> ARITH_OPR
PARAM -> LOGIC_OPR
ALL -> ID_INT
ALL -> STRING
ID -> OP_ROUND_BRACKET ID_INT CL_ROUND_BRACKET
ID_INT -> ID
ID_INT -> INT
ID_INT -> BOOLEAN
ID_INT -> NONE
BOOLEAN -> TRUE
BOOLEAN -> FALSE
BOOLEAN -> NONE
BOOLEAN -> NOT BOOLEAN